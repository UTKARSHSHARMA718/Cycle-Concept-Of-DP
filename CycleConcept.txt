class Solution {
    public int numberOfPaths(int[][] grid, int k) {
        
        boolean vis[][]=new boolean[grid.length+1][grid[0].length+1];
        // no need to take dp till max sum just take till k since 
        // if (sum - x)%k is giving me y (remainder) then we know that
        // sum % k will also give me y remainder
        // Ex:-
        // let sum = 15, k==4 , sum(15) % k(4) we get 3
        // then 15 - x(6 any number) = 9 % k(4) = 1
        // 1 + 6 = 7 % 4 = 3
        // hence sum(15) % k(4) == (sum(15)- x(6)) % k(4)
        long [][][]dp=new long[grid.length+1][grid[0].length+1][k+1];
        for(long [][]itt:dp)
            for(long []it:itt)
                 Arrays.fill(it,-1);
        
        return (int)f(grid,k,0,grid.length-1,grid[0].length-1,dp)%1000000007;
    }
    public long f(int [][]grid,int k, long sum,int n ,int m,long [][][]dp){
        
        if(n==0 && m==0){
            
            if((sum + grid[0][0])%k==0){
                System.out.println(sum + grid[0][0]);
                return 1;
            }
            return 0;
        }
        if(n<0 || m<0 ){
            return 0;
        }
        
        if(dp[n][m][(int)sum]!=-1){
            return dp[n][m][(int)sum]%1000000007;
        }

        long a=f(grid,k,(sum + grid[n][m])%k,n-1,m,dp);

        long b=f(grid,k,(sum + grid[n][m])%k,n,m-1,dp);

        
        return dp[n][m][(int)(sum)]=(int)((a+b)%1000000007);
        
    }
}
